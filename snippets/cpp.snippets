# ~/.config/nvim/snippets/cpp.snippets

# C++ Boilerplate
snippet boiler
    #include <iostream>
    #include <vector>
    #include<cstdint>
    #include<set>
    #include<map>
    #include <algorithm>
    #include<unordered_map>
    using namespace std;

    #define ll long long
    #define pii pair<int,int>
    #define vi vector<int>
    #define get_vector(x,n)for(int i = 0;i < n; ++i)cin>>x[i];
    #define print_vector(x)for(auto &i : (x))cout<<i<<" ";
    #define all(x) (x).begin(),(x).end()
    #define rep(i,m,n) for(int i = m;i < n;++i)
    #define res(i,m,n) for(int i = m;i >= n;--i)
    const ll mod = 1e9 + 7;
    //combination template   
    //this is power mod and not simple power
    ll modpower(ll a, ll b)
    {
        if (b == 0)
            return 1;
        else if (b == 1)
            return a;
        else
        {
            ll x = modpower(a, b / 2);
            ll y = x * x;
            y %= mod;
            // if(b%2!=0) return y*a;
            if (b % 2 != 0)
                return (y * a) % mod;
            else
                return y;
        }
    }

    ll modInverse(ll a, ll m)
    {
        return modpower(a, m - 2);
    }

    const ll PRE_COMPUTE_MAX = 1e6;
    vector<ll> factorial( PRE_COMPUTE_MAX + 1);
    vector<ll> invfactorial(PRE_COMPUTE_MAX + 1);
    //precalculate
    void fac()
    {
        factorial[0] = 1;
        for (ll i = 1; i <= PRE_COMPUTE_MAX ; i++)
            factorial[i] = (factorial[i - 1] * i) % mod;
    }
    //precalculate
    void invfac()
    {
        invfactorial[PRE_COMPUTE_MAX]  = modInverse(factorial[PRE_COMPUTE_MAX], mod);
        for (ll i = PRE_COMPUTE_MAX; i >= 1; i--)
            invfactorial[i - 1] = (invfactorial[i] * i) % mod;
    }
    ll ncrmod(ll n, ll r)
    {
        if (n < r)
        {
            return 0;
        }
        return ((factorial[n] * invfactorial[r] % mod) * invfactorial[n - r]) % mod;
    }
    ll simplecombi(int n,int k)
    {
        if(k >n)return 0;
        ll ans=1;
        k=k>n-k?n-k:k;
        ll j=1;
        for(;j<=k;j++,n--)
        {
            if(n%j==0)
            {
                ans*=n/j;
            }else
            if(ans%j==0)
            {
                ans=ans/j*n;
            }else
            {
                ans=(ans*n)/j;
            }
        }
        return ans;
    }
    
    void compute()
    {
        ${0: //Good Luck}
    }

    int main() 
    {
        #ifdef dir_io
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
        #endif
        ios_base::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);

        int t = 1;
        ${1}cin>>t;
        while(t--)
        {
            compute();
        }
        
        return 0;
    }

